.. _guide-using-the-scanner:

=================
Using the Scanner
=================

Start the image capture
=======================

The image capturing is started with a single class method call on the ``GiniVision`` class. The
document capturing then displays its own UI and your application's UI is dismissed during the
capturing process. The arguments to this method call are:

* The currently displayed view controller. Usually, this is the same view controller as the
  view controller which started the image capturing.
* An instance of an object that implements the ``GiniVisionDelegate`` protocol. This delegate is
  called during several steps of the image capturing and gets the results of the image capturing.

The following example implements a callback for a touch event on a UIButton. In this callback, the
image capturing is started.

.. code-block:: obj-c

    #import <GiniVision/GiniVision.h>

    @implementation MyViewController

    - (IBAction) scanDocument:(UIButton *)sender {
        [GiniVision captureImageWithViewController:self delegate:self];
    }

    @end


.. warning:: You really have to call this method with the view controller that is currently
             displayed. If the given view controller isn't displayed currently, the framework
             throws an error and your application will crash.


Implement and use the ``GiniVisionDelegate``
============================================

As mentioned above, the image capturing comes with a built-in UI and your application does not need
to implement anything regarding the image capturing. However, you are usually interested in the
results of the image capturing. The results of the image capturing process are given to your app via
the ``GiniVisionDelegate``. Therefore, you need to pass an object that implements this delegate to
the image capture call (see the method call in the example above).


``didScan:(UIImage *) documentType:(GINIDocumentType) uploadDelegate:(id<GINIUploadDelegate>)``
-----------------------------------------------------------------------------------------------

Will be called after a document has been captured with the document (cropped and enhanced) as
argument. The given documentType argument describes the type of the scanned document. The receiver
should upload the document and inform the given upload delegate so the UI is updated accordingly.
See below to find out how to use the upload delegate.

The first parameter is an UIImage instance containing the scanned document. The second argument is
an enum that informs you which document type the user scanned. This can either be

- ``GINIDocumentTypeInvoice``: An invoice, usually in the DIN A4 format.

- ``GINIDocumentTypeRemittance``: A German remittance slip in the DIN A6 format

- ``GINIDocumentTypeIntegratedRemittance``: A document in the A4 format which contains a remittance
  slip.


``(void)didScanOriginal:(UIImage *)``
-------------------------------------
Will be called after a document has been captured with the original (that means not enhanced and
not cropped) image as argument. Handy for debugging or analysis. It is not recommended to use this
feature in production.


``(void)didFinishCapturing:(BOOL)``
-----------------------------------
Called after the image capturing UI has been dismissed. The given argument success indicates
whether the user has captured a document or has canceled the document capturing.


Use the ``GINIUploadDelegate`` to upload files and update the UI
================================================================

Your application is responsible to upload the captured document, for example with the help of the
`Gini SDK for iOS <http://developer.gini.net/gini-sdk-ios/>`_. Nevertheless, the Gini Vision library
displays an optimized and user-tested UI during the upload. When your application gets informed
that a document is captured, it gets also an instance of the upload delegate. You can call several
methods on this delegate in order to update the UI to reflect the current update status.


``(void)didProgress:(float)totalProgress``
------------------------------------------
Call this method during the upload of the document to update the activity indicator of the upload
UI accordingly.

``(void)didEndUpload``
----------------------

Call this method after the upload of a document has been finished. It will make the photo
capturing UI disappear and return to the screen of your UI from which the image capturing was
started. After that, the `didFinish:` method of your application's `GiniVisionDelegate` will be
called.
